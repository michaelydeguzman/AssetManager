// <auto-generated />
using System;
using DAM.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAM.Persistence.Migrations
{
    [DbContext(typeof(DAMDBContext))]
    [Migration("20211123014109_changeColorName")]
    partial class changeColorName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAM.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Administration"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Brand"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Customer Services"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Human Resources"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Legal"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Marketing"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Operations"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Sales"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Sponsorship"
                        });
                });

            modelBuilder.Entity("DAM.Domain.Entities.ApprovalLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("AssetVersionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CompletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActiveLevel")
                        .HasColumnType("bit");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ApprovalLevels");
                });

            modelBuilder.Entity("DAM.Domain.Entities.ApprovalLevelApprover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalLevelId")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("ApproverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ReviewDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalLevelId");

                    b.HasIndex("ApproverId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ApprovalLevelApprovers");
                });

            modelBuilder.Entity("DAM.Domain.Entities.ApprovalTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ApprovalTemplates");
                });

            modelBuilder.Entity("DAM.Domain.Entities.ApprovalTemplateLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LevelOrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalTemplateId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ApprovalTemplateLevels");
                });

            modelBuilder.Entity("DAM.Domain.Entities.ApprovalTemplateLevelApprover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalTemplateLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ApproverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalTemplateLevelId");

                    b.HasIndex("ApproverId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ApprovalTemplateLevelApprovers");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("ApprovalDueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ShareFolderIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("StatusUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FolderId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("DAM.Domain.Entities.AssetAccountMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AssetAccounts");
                });

            modelBuilder.Entity("DAM.Domain.Entities.AssetAudit", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssetFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("AuditCreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuditCreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("AuditCreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("AuditType")
                        .HasColumnType("int");

                    b.Property<string>("AuditTypeText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<string>("FolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewParameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousParameters")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AuditCreatedByUserId");

                    b.HasIndex("FolderId");

                    b.ToTable("AssetAudit");
                });

            modelBuilder.Entity("DAM.Domain.Entities.AssetCountryRegionMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("RegionId");

                    b.ToTable("AssetCountryRegions");
                });

            modelBuilder.Entity("DAM.Domain.Entities.AssetVersions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActiveVersion")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<long>("CRC32Code")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileSizeText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OriginalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("StatusUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AssetVersions");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCurrentCart")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("DAM.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetID")
                        .HasColumnType("int");

                    b.Property<int>("CartID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetID");

                    b.HasIndex("CartID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FolderId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RootFolderId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("RootFolderId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All states and territories",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Excludes Ireland and Wales",
                            Name = "UK"
                        });
                });

            modelBuilder.Entity("DAM.Domain.Entities.DAMToDynamic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMarketing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUploaded")
                        .HasColumnType("bit");

                    b.Property<string>("UploadedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UploadedById");

                    b.ToTable("DAMToDynamics");
                });

            modelBuilder.Entity("DAM.Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EmailTemplateKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contents = "<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'><html xmlns='http://www.w3.org/1999/xhtml'><head><meta http-equiv='Content-Type' content='text/html; charset=UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'><title>Notification</title><style type='text/css'>    #outlook a {padding:0;}     body{width:100% !important; -webkit-text-size-adjust:100%; -ms-text-size-adjust:100%; margin:0; padding:0;}     .ExternalClass {width:100%;}    .ExternalClass, .ExternalClass p, .ExternalClass span, .ExternalClass font, .ExternalClass td, .ExternalClass div {line-height: 100%;}    table td {border-collapse: collapse;}   </style></head><body><table bgcolor='%%PrimaryColor%%' border='0' cellpadding='0' cellspacing='0' style='background-color:%%PrimaryColor%%; margin:0; padding:0; width:100% !important; line-height: 100%; text-align:center; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='100%'><tbody><tr><td style='border-collapse: collapse; padding:30px 0;' valign='top'><table align='center' bgcolor='%%PrimaryColor%%' border='0' cellpadding='0' cellspacing='0' style='background-color:%%PrimaryColor%%; border:0; text-align:center; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='600'><tbody><tr><img alt='logo' src='%%LogoUrl%%' height='60' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; margin-bottom:30px' /></tr></br></br><tr><td style='border-collapse: collapse; padding:0;' valign='top'><table  border='0' cellpadding='0' cellspacing='0' style='border:0;text-align:left;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;border-radius:15px;background: hsla(0,0%,100%,.058)' width='100%'><tbody><!-- <tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'><img alt='' src='%%EmailImagesUrl%%rounded-top-left.gif' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; display:block;'></td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'><img alt='' src='%%EmailImagesUrl%%rounded-top-right.gif' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; display:block;'></td></tr> --><tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'><table border='0' cellpadding='0' cellspacing='0' style='border:0; text-align:left; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='100%'><tbody><tr><td style='border-collapse: collapse; padding:20px 0;' valign='top'><font style='font-family:Arial; font-size:13px; color:white; line-height:18px;'>Hi <strong> %%NewUser%% </strong> ,<br><br>You have been invited to join %%ClientName%% as a new %%NewUserRole%%. Please click the button below to confirm your email. Welcome! <br><br></td></tr><tr style='font-family:Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0; padding: 0;font-color: white;text-align:center'><td class='content-block' style='font-family:Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 5px;' valign='top'><a href='%%ConfirmEmailUrl%%' style='background-color:%%AltColor%%; border: 1px solid %%AltColor%%; border-radius:3px; color:#ffff;display:inline-block;font-family:Arial, sans-serif;font-size:13px;line-height:30px;text-align:center;text-decoration:none; width:110px;-webkit-text-size-adjust:none;'>Confirm</a></td></tr><tr><td style='border-collapse: collapse; padding-top:15px; text-align: right;' valign='top'><font style='font-family:Arial; font-size:10px; color:white; line-height:25px;'> Powered by <a href='https://simple.io' style='color:white'> Simple </a></font></td></tr></tbody></table></td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'>&nbsp;</td></tr><tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'></td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'></td></tr></tbody></table></td></tr></tbody></table></br><table border='0' cellpadding='0' cellspacing='0' align='center' style='border:0; text-align:left; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='600'></table></td></tr></tbody></table></body></html>",
                            Deleted = false,
                            EmailTemplateKey = "USER_VERIFICATION",
                            Subject = "You have been invited to join %%ClientName%%."
                        },
                        new
                        {
                            Id = 2,
                            Contents = "<!DOCTYPE html PUBLIC ' -//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>  <html   xmlns='http://www.w3.org/1999/xhtml'>   <head>    <meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>     <meta name='viewport' content='width=device-width, initial-scale=1.0'>      <title>Notification</title>      <style type='text/css'>    #outlook a {padding:0;}     body{width:100% !important; -webkit-text-size-adjust:100%; -ms-text-size-adjust:100%; margin:0; padding:0;}     .ExternalClass {width:100%;}    .ExternalClass, .ExternalClass p, .ExternalClass span, .ExternalClass font, .ExternalClass td, .ExternalClass div {line-height: 100%;}    table td {border-collapse: collapse;}   </style>     </head>     <body>      <table bgcolor='%%PrimaryColor%%' border='0' cellpadding='0' cellspacing='0' style='background-color:%%PrimaryColor%%; margin:0; padding:0; width:100% !important; line-height: 100%; text-align:center; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='100%'>       <tbody>        <tr>         <td style='border-collapse: collapse; padding:30px 0;' valign='top'>          <table align='center' bgcolor='%%PrimaryColor%%' border='0' cellpadding='0' cellspacing='0' style='background-color:%%PrimaryColor%%; border:0; text-align:center; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='600'>           <tbody>            <tr>             <img alt='logo' src='%%LogoUrl%%' height='60' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; margin-bottom:30px' /></tr></br></br><tr><td style='border-collapse: collapse; padding:0;' valign='top'><table  border='0' cellpadding='0' cellspacing='0' style='border:0;text-align:left;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;border-radius:15px;background: hsla(0,0%,100%,.058)' width='100%'><tbody><!-- <tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'><img alt='' src='%%EmailImagesUrl%%rounded-top-left.gif' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; display:block;'></td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'><img alt='' src='%%EmailImagesUrl%%rounded-top-right.gif' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; display:block;'></td></tr> --><tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'><table border='0' cellpadding='0' cellspacing='0' style='border:0; text-align:left; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='100%'><tbody><tr><td style='border-collapse: collapse; padding:20px 0;' valign='top'><font style='font-family:Arial; font-size:13px; color:white; line-height:18px;'>Hi<strong> %%UserName%% </strong> ,<br><br>You have requested for a password reset. Please click the button below to proceed to the password reset page.<br><br></td></tr><tr style='font-family:Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0; padding: 0;font-color: white;text-align:center'><td class='content-block' style='font-family:Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 5px;' valign='top'><a href='%%ResetPasswordUrl%%' style='background-color:%%AltColor%%; border: 1px solid %%AltColor%%; border-radius:3px; color:#ffff;display:inline-block;font-family:Arial, sans-serif;font-size:13px;line-height:30px;text-align:center;text-decoration:none; width:110px;-webkit-text-size-adjust:none;'>Proceed</a></td></tr><tr><td style='border-collapse: collapse; padding-top:15px; text-align: right;' valign='top'><font style='font-family:Arial; font-size:10px; color:white; line-height:25px;'> Powered by <a href='https://simple.io' style='color:white'> Simple </a></font></td></tr></tbody></table></td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'>&nbsp;</td></tr><tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'></td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'></td></tr></tbody></table></td></tr></tbody></table></br><table border='0' cellpadding='0' cellspacing='0' align='center' style='border:0; text-align:left; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='600'></table></td></tr></tbody></table></body></html>",
                            Deleted = false,
                            EmailTemplateKey = "PASSWORD_RESET",
                            Subject = "You have requested for a password reset."
                        },
                        new
                        {
                            Id = 3,
                            Contents = "<!DOCTYPE html PUBLIC ' -//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>  <html   xmlns='http://www.w3.org/1999/xhtml'>   <head>    <meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>     <meta name='viewport' content='width=device-width, initial-scale=1.0'>      <title>Notification</title>      <style type='text/css'>    #outlook a {padding:0;}     body{width:100% !important; -webkit-text-size-adjust:100%; -ms-text-size-adjust:100%; margin:0; padding:0;}     .ExternalClass {width:100%;}    .ExternalClass, .ExternalClass p, .ExternalClass span, .ExternalClass font, .ExternalClass td, .ExternalClass div {line-height: 100%;}    table td {border-collapse: collapse;}   </style>     </head>     <body>      <table bgcolor='%%PrimaryColor%%' border='0' cellpadding='0' cellspacing='0' style='background-color:%%PrimaryColor%%; margin:0; padding:0; width:100% !important; line-height: 100%; text-align:center; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='100%'>       <tbody>        <tr>         <td style='border-collapse: collapse; padding:30px 0;' valign='top'>          <table align='center' bgcolor='%%PrimaryColor%%' border='0' cellpadding='0' cellspacing='0' style='background-color:%%PrimaryColor%%; border:0; text-align:center; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='600'>           <tbody>            <tr>             <img src='%%LogoUrl%%' height='60' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; margin-bottom:30px' />            </tr>           </br>          </br>         <tr>          <td style='border-collapse: collapse; padding:0;' valign='top'>           <table  border='0' cellpadding='0' cellspacing='0' style='border:0;text-align:left;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;border-radius:15px;background: hsla(0,0%,100%,.058)' width='100%'>            <tbody>             <!-- <tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'><img alt='' src='%%EmailImagesUrl%%rounded-top-left.gif' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; display:block;'></td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'><img alt='' src='%%EmailImagesUrl%%rounded-top-right.gif' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; display:block;'></td></tr> -->             <tr>              <td style='border-collapse: collapse; padding:0;' valign='top' width='30'>&nbsp;</td>              <td style='border-collapse: collapse; padding:0;' valign='top' width='540'>               <table border='0' cellpadding='0' cellspacing='0' style='border:0; text-align:left; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='100%'>                <tbody>                 <tr>                  <td style='border-collapse: collapse; padding:20px 0;' valign='top'>                   <font style='font-family:Arial; font-size:13px; color:white; line-height:18px;'>Hi                     <strong> %%UserName%% </strong> ,                    <br>                     <br>Your %%ClientName%% account has been %%UserStatus%%. Please contact your administrator for further information. Thank you!                      <br>                       <br>                       </td>                      </tr>                      <tr>                       <td style='border-collapse: collapse; padding-top:15px; text-align: right;' valign='top'>                        <font style='font-family:Arial; font-size:10px; color:white; line-height:25px;'> Powered by <a href='https://simple.io' style='color:white'> Simple </a></font>                       </td>                      </tr>                     </tbody>                    </table>                   </td>                   <td style='border-collapse: collapse; padding:0;' valign='top' width='30'>&nbsp;</td>                  </tr>                  <tr>                   <td style='border-collapse: collapse; padding:0;' valign='top' width='30'>                     </td>                    <td style='border-collapse: collapse; padding:0;' valign='top' width='540'>&nbsp;</td>                    <td style='border-collapse: collapse; padding:0;' valign='top' width='30'>                     </td>                    </tr>                   </tbody>                  </table>                 </td>                </tr>               </tbody>              </table>             </br>             <table border='0' cellpadding='0' cellspacing='0' align='center' style='border:0; text-align:left; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='600'></table>            </td>           </tr>          </tbody>         </table>        </body>       </html>",
                            Deleted = false,
                            EmailTemplateKey = "USER_STATUS_CHANGE",
                            Subject = "Your %%ClientName%% access has been %%UserStatus%%."
                        },
                        new
                        {
                            Id = 4,
                            Contents = "<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'><html xmlns='http://www.w3.org/1999/xhtml'><head><meta http-equiv='Content-Type' content='text/html; charset=UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'><title>Notification</title><style type='text/css'>    #outlook a {padding:0;}     body{width:100% !important; -webkit-text-size-adjust:100%; -ms-text-size-adjust:100%; margin:0; padding:0;}     .ExternalClass {width:100%;}    .ExternalClass, .ExternalClass p, .ExternalClass span, .ExternalClass font, .ExternalClass td, .ExternalClass div {line-height: 100%;}    table td {border-collapse: collapse;}   </style></head><body><table bgcolor='%%PrimaryColor%%' border='0' cellpadding='0' cellspacing='0' style='background-color:%%PrimaryColor%%; margin:0; padding:0; width:100% !important; line-height: 100%; text-align:center; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='100%'><tbody><tr><td style='border-collapse: collapse; padding:30px 0;' valign='top'><table align='center' bgcolor='%%PrimaryColor%%' border='0' cellpadding='0' cellspacing='0' style='background-color:%%PrimaryColor%%; border:0; text-align:center; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='600'><tbody><tr><img alt='logo' src='%%LogoUrl%%' height='60' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; margin-bottom:30px' /></tr></br></br><tr><td style='border-collapse: collapse; padding:0;' valign='top'><table  border='0' cellpadding='0' cellspacing='0' style='border:0;text-align:left;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;border-radius:15px;background: hsla(0,0%,100%,.058)' width='100%'><tbody><!-- <tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'><img alt='' src='%%EmailImagesUrl%%rounded-top-left.gif' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; display:block;'></td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'><img alt='' src='%%EmailImagesUrl%%rounded-top-right.gif' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; display:block;'></td></tr> --><tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'><table border='0' cellpadding='0' cellspacing='0' style='border:0; text-align:left; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='100%'><tbody><tr><td style='border-collapse: collapse; padding:20px 0;' valign='top'><font style='font-family:Arial; font-size:13px; color:white; line-height:18px;'>Hi <strong> %%Approver%% </strong> ,<br><br>%%AssetTitle%% - Version %%VersionNumber%% has been submitted by %%Submitter%% for your approval%%DueDate%%. Please click the button below to review the asset. <br><br></td></tr><tr style='font-family:Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0; padding: 0;font-color: white;text-align:center'><td class='content-block' style='font-family:Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 5px;' valign='top'><a href='%%ReviewUrl%%' style='background-color:%%AltColor%%; border: 1px solid %%AltColor%%; border-radius:3px; color:#ffff;display:inline-block;font-family:Arial, sans-serif;font-size:13px;line-height:30px;text-align:center;text-decoration:none; width:110px;-webkit-text-size-adjust:none;'>Review</a></td></tr><tr><td style='border-collapse: collapse; padding-top:15px; text-align: right;' valign='top'><font style='font-family:Arial; font-size:10px; color:white; line-height:25px;'> Powered by <a href='https://simple.io' style='color:white'> Simple </a></font></td></tr></tbody></table></td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'>&nbsp;</td></tr><tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'></td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'></td></tr></tbody></table></td></tr></tbody></table></br><table border='0' cellpadding='0' cellspacing='0' align='center' style='border:0; text-align:left; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='600'></table></td></tr></tbody></table></body></html>",
                            Deleted = false,
                            EmailTemplateKey = "SENT_FOR_APPROVAL",
                            Subject = "An asset has been sent for your approval."
                        },
                        new
                        {
                            Id = 5,
                            Contents = "<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'><html xmlns='http://www.w3.org/1999/xhtml'><head><meta http-equiv='Content-Type' content='text/html; charset=UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'><title>Notification</title><style type='text/css'>    #outlook a {padding:0;}     body{width:100% !important; -webkit-text-size-adjust:100%; -ms-text-size-adjust:100%; margin:0; padding:0;}     .ExternalClass {width:100%;}    .ExternalClass, .ExternalClass p, .ExternalClass span, .ExternalClass font, .ExternalClass td, .ExternalClass div {line-height: 100%;}    table td {border-collapse: collapse;}   </style></head><body><table bgcolor='%%PrimaryColor%%' border='0' cellpadding='0' cellspacing='0' style='background-color:%%PrimaryColor%%; margin:0; padding:0; width:100% !important; line-height: 100%; text-align:center; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='100%'><tbody><tr><td style='border-collapse: collapse; padding:30px 0;' valign='top'><table align='center' bgcolor='%%PrimaryColor%%' border='0' cellpadding='0' cellspacing='0' style='background-color:%%PrimaryColor%%; border:0; text-align:center; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='600'><tbody><tr><img alt='logo' src='%%LogoUrl%%' height='60' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; margin-bottom:30px' /></tr></br></br><tr><td style='border-collapse: collapse; padding:0;' valign='top'><table  border='0' cellpadding='0' cellspacing='0' style='border:0;text-align:left;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;border-radius:15px;background: hsla(0,0%,100%,.058)' width='100%'><tbody><!-- <tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'><img alt='' src='%%EmailImagesUrl%%rounded-top-left.gif' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; display:block;'></td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'><img alt='' src='%%EmailImagesUrl%%rounded-top-right.gif' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; display:block;'></td></tr> --><tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'><table border='0' cellpadding='0' cellspacing='0' style='border:0; text-align:left; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='100%'><tbody><tr><td style='border-collapse: collapse; padding:20px 0;' valign='top'><font style='font-family:Arial; font-size:13px; color:white; line-height:18px;'>Hi <strong> %%Approver%% </strong> ,<br><br>%%AssetTitle%% - Version %%VersionNumber%% has been delegated by %%Submitter%% for your approval%%DueDate%%. Please click the button below to review the asset. <br><br></td></tr><tr style='font-family:Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0; padding: 0;font-color: white;text-align:center'><td class='content-block' style='font-family:Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 5px;' valign='top'><a href='%%ReviewUrl%%' style='background-color:%%AltColor%%; border: 1px solid %%AltColor%%; border-radius:3px; color:#ffff;display:inline-block;font-family:Arial, sans-serif;font-size:13px;line-height:30px;text-align:center;text-decoration:none; width:110px;-webkit-text-size-adjust:none;'>Review</a></td></tr><tr><td style='border-collapse: collapse; padding-top:15px; text-align: right;' valign='top'><font style='font-family:Arial; font-size:10px; color:white; line-height:25px;'> Powered by <a href='https://simple.io' style='color:white'> Simple </a></font></td></tr></tbody></table></td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'>&nbsp;</td></tr><tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'></td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'></td></tr></tbody></table></td></tr></tbody></table></br><table border='0' cellpadding='0' cellspacing='0' align='center' style='border:0; text-align:left; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='600'></table></td></tr></tbody></table></body></html>",
                            Deleted = false,
                            EmailTemplateKey = "DELEGATE_APPROVAL",
                            Subject = "An asset has been delegated to you for approval."
                        },
                        new
                        {
                            Id = 6,
                            Contents = "<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'><html xmlns='http://www.w3.org/1999/xhtml'><head><meta http-equiv='Content-Type' content='text/html; charset=UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'><title>Notification</title><style type='text/css'>    #outlook a {padding:0;}     body{width:100% !important; -webkit-text-size-adjust:100%; -ms-text-size-adjust:100%; margin:0; padding:0;}     .ExternalClass {width:100%;}    .ExternalClass, .ExternalClass p, .ExternalClass span, .ExternalClass font, .ExternalClass td, .ExternalClass div {line-height: 100%;}    table td {border-collapse: collapse;}   </style></head><body><table bgcolor='%%PrimaryColor%%' border='0' cellpadding='0' cellspacing='0' style='background-color:%%PrimaryColor%%; margin:0; padding:0; width:100% !important; line-height: 100%; text-align:center; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='100%'><tbody><tr><td style='border-collapse: collapse; padding:30px 0;' valign='top'><table align='center' bgcolor='%%PrimaryColor%%' border='0' cellpadding='0' cellspacing='0' style='background-color:%%PrimaryColor%%; border:0; text-align:center; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='600'><tbody><tr><img alt='logo' src='%%LogoUrl%%' height='60' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; margin-bottom:30px' /></tr></br></br><tr><td style='border-collapse: collapse; padding:0;' valign='top'><table  border='0' cellpadding='0' cellspacing='0' style='border:0;text-align:left;border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt;border-radius:15px;background: hsla(0,0%,100%,.058)' width='100%'><tbody><!-- <tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'><img alt='' src='%%EmailImagesUrl%%rounded-top-left.gif' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; display:block;'></td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'><img alt='' src='%%EmailImagesUrl%%rounded-top-right.gif' style='outline:none; text-decoration:none; -ms-interpolation-mode: bicubic; border:0; display:block;'></td></tr> --><tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'><table border='0' cellpadding='0' cellspacing='0' style='border:0; text-align:left; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='100%'><tbody><tr><td style='border-collapse: collapse; padding:20px 0;' valign='top'><font style='font-family:Arial; font-size:13px; color:white; line-height:18px;'>Hi <strong> %%Submitter%% </strong> ,<br><br>%%AssetTitle%% - Version %%VersionNumber%% has been %%ApprovalStatus%% by %%Approver%%.<br><br><font style='font-family:Segoe UI,Arial,sans-serif; font-size:13px; font-style: italic; color:white; line-height:18px;'>%%Comments%%</font></td></tr><tr style='font-family:Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0; padding: 0;font-color: white;text-align:center'><td class='content-block' style='font-family:Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 5px;' valign='top'><a href='%%AssetUrl%%' style='background-color:%%AltColor%%; border: 1px solid %%AltColor%%; border-radius:3px; color:#ffff;display:inline-block;font-family:Arial, sans-serif;font-size:13px;line-height:30px;text-align:center;text-decoration:none; width:110px;-webkit-text-size-adjust:none;'>Go to Asset</a></td></tr><tr><td style='border-collapse: collapse; padding-top:15px; text-align: right;' valign='top'><font style='font-family:Arial; font-size:10px; color:white; line-height:25px;'> Powered by <a href='https://simple.io' style='color:white'> Simple </a></font></td></tr></tbody></table></td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'>&nbsp;</td></tr><tr><td style='border-collapse: collapse; padding:0;' valign='top' width='30'></td><td style='border-collapse: collapse; padding:0;' valign='top' width='540'>&nbsp;</td><td style='border-collapse: collapse; padding:0;' valign='top' width='30'></td></tr></tbody></table></td></tr></tbody></table></br><table border='0' cellpadding='0' cellspacing='0' align='center' style='border:0; text-align:left; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' width='600'></table></td></tr></tbody></table></body></html>",
                            Deleted = false,
                            EmailTemplateKey = "APPROVER_REVIEWED",
                            Subject = "An approver has %%ApprovalStatus%% your submission."
                        });
                });

            modelBuilder.Entity("DAM.Domain.Entities.FeatureFlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FeatureFlagName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeatureFlagNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FeatureFlags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FeatureFlagName = "Approvals",
                            FeatureFlagNumber = 1,
                            IsActivated = true
                        },
                        new
                        {
                            Id = 2,
                            FeatureFlagName = "Partnership",
                            FeatureFlagNumber = 2,
                            IsActivated = true
                        },
                        new
                        {
                            Id = 3,
                            FeatureFlagName = "AssetVersioning",
                            FeatureFlagNumber = 3,
                            IsActivated = true
                        },
                        new
                        {
                            Id = 4,
                            FeatureFlagName = "VideoIndexer",
                            FeatureFlagNumber = 4,
                            IsActivated = true
                        },
                        new
                        {
                            Id = 5,
                            FeatureFlagName = "Tagging",
                            FeatureFlagNumber = 5,
                            IsActivated = true
                        },
                        new
                        {
                            Id = 6,
                            FeatureFlagName = "PowerAnnotate",
                            FeatureFlagNumber = 6,
                            IsActivated = true
                        },
                        new
                        {
                            Id = 7,
                            FeatureFlagName = "Archive",
                            FeatureFlagNumber = 7,
                            IsActivated = true
                        },
                        new
                        {
                            Id = 8,
                            FeatureFlagName = "AuditTrail",
                            FeatureFlagNumber = 8,
                            IsActivated = true
                        },
                        new
                        {
                            Id = 9,
                            FeatureFlagName = "Report",
                            FeatureFlagNumber = 9,
                            IsActivated = true
                        },
                        new
                        {
                            Id = 10,
                            FeatureFlagName = "PromoteMRM",
                            FeatureFlagNumber = 10,
                            IsActivated = false
                        },
                        new
                        {
                            Id = 11,
                            FeatureFlagName = "CheckDuplicate",
                            FeatureFlagNumber = 11,
                            IsActivated = true
                        });
                });

            modelBuilder.Entity("DAM.Domain.Entities.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ParentFolderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 11, 23, 1, 41, 6, 482, DateTimeKind.Unspecified).AddTicks(9365), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            Description = "root",
                            FolderName = "DAM",
                            OrderNumber = 0
                        });
                });

            modelBuilder.Entity("DAM.Domain.Entities.FolderAccountMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FolderId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("FolderAccounts");
                });

            modelBuilder.Entity("DAM.Domain.Entities.FolderCountryRegionMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FolderId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("RegionId");

                    b.ToTable("FolderCountryRegions");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImageFileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserRoleId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Logo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileName = "logo-simple.png",
                            IsApplied = true,
                            IsDeleted = false,
                            LogoUrl = "https://damblob1.blob.core.windows.net/logocontainer-dev-mikey/logo-simple.png?sp=r&st=2021-11-11T04:38:10Z&se=2022-11-11T12:38:10Z&spr=https&sv=2020-08-04&sr=b&sig=P60UQSs6gi2%2BobEvkcZp%2BoY5DRCbqQnOsYI%2Fse0VVmY%3D"
                        });
                });

            modelBuilder.Entity("DAM.Domain.Entities.PinAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PinAssets");
                });

            modelBuilder.Entity("DAM.Domain.Entities.PinFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PinFolders");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Description = "ACT"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Description = "Queensland"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Description = "New South Wales"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Description = "Northern Territory"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Description = "South Australia"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Description = "Tasmania"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Description = "Western Australia"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            Description = "Victoria"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 2,
                            Description = "East of England"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 2,
                            Description = "Greater London"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 2,
                            Description = "Midlands"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 2,
                            Description = "North East"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 2,
                            Description = "North West"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 2,
                            Description = "Northern Ireland"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 2,
                            Description = "Scotland"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 2,
                            Description = "South East"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 2,
                            Description = "South West"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 2,
                            Description = "Wales"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 2,
                            Description = "Yorshire"
                        });
                });

            modelBuilder.Entity("DAM.Domain.Entities.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TertiaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            IsApplied = true,
                            Name = "Default",
                            PrimaryColor = "246,57,21",
                            SecondaryColor = "150,100,30",
                            TertiaryColor = "246,20,41"
                        });
                });

            modelBuilder.Entity("DAM.Domain.Entities.Tag", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int?>("AssetVersionsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCognitive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetVersionsId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DAM.Domain.Entities.UserFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFolders");
                });

            modelBuilder.Entity("DAM.Domain.Entities.UserOOO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DefaultDelegateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("UserOOO");
                });

            modelBuilder.Entity("DAM.Domain.Entities.UserRole", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanAccessAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApprove")
                        .HasColumnType("bit");

                    b.Property<bool>("CanArchive")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanInvite")
                        .HasColumnType("bit");

                    b.Property<bool>("CanMove")
                        .HasColumnType("bit");

                    b.Property<bool>("CanPinAsset")
                        .HasColumnType("bit");

                    b.Property<bool>("CanShare")
                        .HasColumnType("bit");

                    b.Property<bool>("CanShareFolders")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUpload")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanAccessAdmin = true,
                            CanAdd = true,
                            CanApprove = true,
                            CanArchive = true,
                            CanDelete = true,
                            CanEdit = true,
                            CanInvite = true,
                            CanMove = true,
                            CanPinAsset = true,
                            CanShare = true,
                            CanShareFolders = true,
                            CanUpload = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CanAccessAdmin = true,
                            CanAdd = false,
                            CanApprove = false,
                            CanArchive = false,
                            CanDelete = false,
                            CanEdit = false,
                            CanInvite = true,
                            CanMove = false,
                            CanPinAsset = true,
                            CanShare = false,
                            CanShareFolders = false,
                            CanUpload = false,
                            Name = "Company Admin"
                        },
                        new
                        {
                            Id = 3,
                            CanAccessAdmin = false,
                            CanAdd = false,
                            CanApprove = false,
                            CanArchive = false,
                            CanDelete = false,
                            CanEdit = false,
                            CanInvite = false,
                            CanMove = false,
                            CanPinAsset = true,
                            CanShare = false,
                            CanShareFolders = false,
                            CanUpload = false,
                            Name = "Subscriber"
                        },
                        new
                        {
                            Id = 4,
                            CanAccessAdmin = false,
                            CanAdd = false,
                            CanApprove = false,
                            CanArchive = false,
                            CanDelete = false,
                            CanEdit = false,
                            CanInvite = false,
                            CanMove = false,
                            CanPinAsset = true,
                            CanShare = true,
                            CanShareFolders = false,
                            CanUpload = false,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DAM.Domain.Entities.Watermark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Opacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WatermarkPosition")
                        .HasColumnType("int");

                    b.Property<string>("WatermarkUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Watermarks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRoleClaim<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserLogin<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserToken<string>");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Identity.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("CanAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApprove")
                        .HasColumnType("bit");

                    b.Property<bool>("CanArchive")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanInvite")
                        .HasColumnType("bit");

                    b.Property<bool>("CanMove")
                        .HasColumnType("bit");

                    b.Property<bool>("CanShare")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUpload")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>");

                    b.Property<string>("RoleId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("RoleId1");

                    b.HasDiscriminator().HasValue("ApplicationRoleClaim");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Identity.ApplicationUserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ApplicationUserClaim");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Identity.ApplicationUserLogin", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ApplicationUserLogin");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("RoleId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Identity.ApplicationUserToken", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserToken<string>");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ApplicationUserToken");
                });

            modelBuilder.Entity("DAM.Domain.Entities.ApprovalLevel", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Asset", "Asset")
                        .WithMany("ApprovalLevels")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DAM.Domain.Entities.ApprovalLevelApprover", b =>
                {
                    b.HasOne("DAM.Domain.Entities.ApprovalLevel", "ApprovalLevel")
                        .WithMany("Approvers")
                        .HasForeignKey("ApprovalLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DAM.Domain.Entities.ApprovalTemplate", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DAM.Domain.Entities.ApprovalTemplateLevel", b =>
                {
                    b.HasOne("DAM.Domain.Entities.ApprovalTemplate", "ApprovalTemplate")
                        .WithMany("ApprovalTemplateLevels")
                        .HasForeignKey("ApprovalTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DAM.Domain.Entities.ApprovalTemplateLevelApprover", b =>
                {
                    b.HasOne("DAM.Domain.Entities.ApprovalTemplateLevel", "ApprovalTemplateLevel")
                        .WithMany("Approvers")
                        .HasForeignKey("ApprovalTemplateLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Asset", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany("AssetCreated")
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Folder", "Folder")
                        .WithMany("Assets")
                        .HasForeignKey("FolderId");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany("AssetModified")
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DAM.Domain.Entities.AssetAccountMetaData", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Account", "Account")
                        .WithMany("AssetAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Asset", "Asset")
                        .WithMany("AssetAccounts")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany("AssetAccountCreated")
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany("AssetAccountModified")
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DAM.Domain.Entities.AssetAudit", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "AuditCreatedByUser")
                        .WithMany()
                        .HasForeignKey("AuditCreatedByUserId");

                    b.HasOne("DAM.Domain.Entities.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");
                });

            modelBuilder.Entity("DAM.Domain.Entities.AssetCountryRegionMetaData", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Asset", "Asset")
                        .WithMany("AssetCountryRegions")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Country", "Country")
                        .WithMany("AssetCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany("AssetCountryRegionCreated")
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany("AssetCountryRegionModified")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DAM.Domain.Entities.Region", "Region")
                        .WithMany("AssetRegions")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAM.Domain.Entities.AssetVersions", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Asset", null)
                        .WithMany("AssetVersions")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Cart", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAM.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAM.Domain.Entities.Comment", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Asset", "Asset")
                        .WithMany("AssetComments")
                        .HasForeignKey("AssetId");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany("CommentsCreated")
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Folder", "Folder")
                        .WithMany("FolderComments")
                        .HasForeignKey("FolderId");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany("CommentsModified")
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Company", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany("CompanyCreated")
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany("CompanyModified")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DAM.Domain.Entities.Folder", "RootFolder")
                        .WithMany("Company")
                        .HasForeignKey("RootFolderId");
                });

            modelBuilder.Entity("DAM.Domain.Entities.DAMToDynamic", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Folder", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany("FolderCreated")
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany("FolderModified")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DAM.Domain.Entities.Folder", "ParentFolder")
                        .WithMany()
                        .HasForeignKey("ParentFolderId");
                });

            modelBuilder.Entity("DAM.Domain.Entities.FolderAccountMetaData", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Account", "Account")
                        .WithMany("FolderAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany("FolderAccountCreated")
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Folder", "Folder")
                        .WithMany("FolderAccounts")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany("FolderAccountModified")
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DAM.Domain.Entities.FolderCountryRegionMetaData", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Country", "Country")
                        .WithMany("FolderCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany("FolderCountryRegionCreated")
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Folder", "Folder")
                        .WithMany("FolderCountryRegions")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany("FolderCountryRegionModified")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DAM.Domain.Entities.Region", "Region")
                        .WithMany("FolderRegions")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAM.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DAM.Domain.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAM.Domain.Entities.Region", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Tag", b =>
                {
                    b.HasOne("DAM.Domain.Entities.AssetVersions", null)
                        .WithMany("Tags")
                        .HasForeignKey("AssetVersionsId");
                });

            modelBuilder.Entity("DAM.Domain.Entities.UserFolder", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAM.Domain.Entities.UserOOO", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Watermark", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAM.Domain.Entities.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId1");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("DAM.Domain.Entities.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("DAM.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
